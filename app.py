import logging
import streamlit as st
from langchain_community.chat_models import ChatOllama
from langchain.schema import HumanMessage

# ==========================
# Streamlit Page Configuration
# ==========================
st.set_page_config(page_title="Code Review Assistant", layout="wide")

# ==========================
# Logging Configuration
# ==========================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ==========================
# Import Custom CSS from styles.css
# ==========================
with open("styles.css") as f:
    custom_css = f"<style>{f.read()}</style>"

st.markdown(custom_css, unsafe_allow_html=True)

# ==========================
# Function Definitions
# ==========================

def get_code_review(language: str, code: str) -> str:
    """
    Invokes the LLaMA model to perform a code review.

    Args:
        language (str): The programming language of the code (Python, R, SQL).
        code (str): The code snippet to be reviewed.

    Returns:
        str: The feedback generated by the LLaMA model.
    """
    try:
        # Initialize the ChatOllama model
        llm = ChatOllama(
            model="llama3.2:1b-instruct-fp16",  # Ensure this model is available in Ollama
            temperature=0.7,
            top_k=10,
            top_p=0.95
        )

        # Define the prompt for code review
        prompt = f"""
You are reviewing {language} code. Provide detailed feedback focusing on the following:

1. **Code Structure**:
   - Is the code well-structured and easy to follow?
   - Are functions and methods used effectively to avoid repetition and improve modularity?
   - Are there any redundant sections or unnecessary complexity?

2. **Style Guide** (based on Google’s style guide):
   - Is the code following Google’s code style for {language}?
   - Are naming conventions (variables, functions) consistent and meaningful?
   - Are comments used appropriately to clarify complex sections?
   - Are there any formatting issues such as improper indentation, line lengths, or missing spaces?

3. **Algorithm Efficiency**:
   - Does the code use the appropriate algorithms for the task?
   - Are there any more efficient algorithms or data structures that could improve performance?
   - Is the time and space complexity considered where applicable?
        """

        # Create a HumanMessage for the prompt
        messages = [HumanMessage(content=prompt)]

        # Invoke the LLaMA model to get the review
        response = llm.invoke(messages)

        # Return the content of the response
        return response.content

    except Exception as e:
        logging.error(f"Error during code review: {e}")
        return "An error occurred while processing your request. Please try again."

# ==========================
# Streamlit App Layout
# ==========================

def main():
    # App Title and Description
    st.title("AI-Powered Code Review")
    st.write(
        """
        Welcome to the **AI-Powered Code Review** tool! This application leverages the LLaMA 3.2 model to provide comprehensive reviews of your Python, R, and SQL code snippets. Focus areas include:
        
        - **Code Structure**
        - **Adherence to Google Style Guides**
        - **Algorithm Efficiency**
        
        Simply select the language, input your code, and receive detailed feedback to enhance your coding practices.
        """
    )

    st.markdown("---")

    # Language Selection
    code_type = st.selectbox("\U0001F4C4 Select Code Type", ["Python", "R", "SQL"])

    # Code Input Area
    code_input = st.text_area(
        f"\U0001F4DD Enter your {code_type} code for review:",
        height=300,
        help=f"Paste your {code_type} code snippet here for analysis."
    )

    # Review Button
    if st.button("\U0001F50D Review Code"):
        if code_input.strip():
            with st.spinner("\U0001F504 Reviewing your code..."):
                review = get_code_review(code_type, code_input)
                st.success("✅ Code review completed!")
                st.subheader("\U0001F4CB Code Review Feedback:")
                st.write(review)
        else:
            st.error("⚠️ Please enter some code for review.")

    st.markdown("---")

    # Additional Information or Footer
    st.write("""
        **Note:** Ensure that your code snippets are free from sensitive information before submitting them for review.
        """)

if __name__ == "__main__":
    main()
